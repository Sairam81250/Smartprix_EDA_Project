# -*- coding: utf-8 -*-
"""Eda-on-smartphone-data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186NmINZE4QwIrrYAt1-j_5WnWbD9t4BS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.max_columns',None)
pd.set_option('display.max_rows',None)

df = pd.read_csv('/content/smartphone_cleaned_v5.csv')

df.shape

df.head()

df.info()

df.isnull().sum()

df.head()

# brand_name #categorical columns lo value_counts use cheyali

# plot a graph of top 5 brands
df['brand_name'].value_counts().head(10).plot(kind='bar')

# pie chart
df['brand_name'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['brand_name'].isnull().sum()

# model
df['model'].nunique()

# price
df['price'].describe() # 1.The disribution is not normal 2. It may have outliers.

sns.displot(kind='hist',data=df,x='price',kde=True)

df['price'].skew() #e value zero ki daggara unte aaa data lo outliers lev anukovachu

sns.boxplot(df['price'])

df[df['price'] > 250000] #kinda vachina phones anni outliers endukante mana table unnam column paina vati rate depend avvaledu
                          # bangaram and diamonds vatitho tayaru cheyadam valla vati rate anthala undi anduke avi mana data avasaram ledu

df['price'].isnull().sum()

df['rating'].describe()

sns.displot(kind='hist',data=df,x='rating',kde=True)

df['rating'].skew()

sns.boxplot(df['rating'])

df['rating'].isnull().sum()/980

df.head()

# has_5g
df['has_5g'].value_counts().plot(kind='pie',autopct='%0.1f%%')

# has_nfc
df['has_nfc'].value_counts().plot(kind='pie',autopct='%0.1f%%')

# has_ir_blaster
df['has_ir_blaster'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df[df['has_ir_blaster'] == True]['brand_name'].value_counts()

df['processor_brand'].value_counts().plot(kind='pie',autopct="%0.1f%%")

df['num_cores'].value_counts().plot(kind='pie',autopct="%0.1f%%")

df['fast_charging_available'].value_counts().plot(kind='pie',autopct="%0.1f%%")

df['ram_capacity'].value_counts().plot(kind='pie',autopct="%0.1f%%")

df['internal_memory'].value_counts().plot(kind='pie',autopct="%0.1f%%")

df['refresh_rate'].value_counts().plot(kind='pie',autopct="%0.1f%%")

df['refresh_rate'].value_counts()

(df['num_rear_cameras'] + df['num_front_cameras']).value_counts().plot(kind='pie',autopct="%0.1f%%")

df['os'].value_counts().plot(kind='pie',autopct='%0.1f%%')

# extended_memory_available
df['extended_memory_available'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['extended_upto'].value_counts().plot(kind='pie',autopct='%0.1f%%')

def plot_graphs(column_name):

  sns.displot(kind='hist',kde=True,data=df,x=column_name,label=column_name)
  sns.catplot(kind='box',data=df,x=column_name)

num_columns = df.select_dtypes(include=['float64','int64']).iloc[:,[3,4,6,9,13,14,16]].columns

for col in num_columns:
  plot_graphs(col)

df.head()

plt.figure(figsize=(20,10))
sns.barplot(data=df,x='brand_name',y='price')
plt.xticks(rotation='vertical')

x = df.groupby('brand_name').count()['model']

temp_df = df[df['brand_name'].isin(x[x > 10].index)]

plt.figure(figsize=(15,8))
sns.barplot(data=temp_df,x='brand_name',y='price')
plt.xticks(rotation='vertical')

df.head()

sns.scatterplot(data=df,x='rating',y='price')

sns.barplot(data=temp_df,x='has_5g',y='price',estimator=np.median)

sns.pointplot(data=temp_df,x='has_nfc',y='price',estimator=np.median)

sns.barplot(data=temp_df,x='has_ir_blaster',y='price',estimator=np.median)

sns.barplot(data=temp_df,x='processor_brand',y='price',estimator=np.median)
plt.xticks(rotation='vertical')

sns.barplot(data=temp_df,x='num_cores',y='price',estimator=np.median)
plt.xticks(rotation='vertical')

pd.crosstab(df['num_cores'],df['os'])

sns.scatterplot(data=df,x='processor_speed',y='price')

sns.scatterplot(data=df,x='screen_size',y='price')

df.corr()['price']

df.isnull().sum()

df.corr()['rating']

# knn imputer
df.shape

x_df = df.select_dtypes(include=['int64','float64']).drop(columns='price')

from sklearn.impute import KNNImputer

imputer = KNNImputer(n_neighbors=5)

x_df_values = imputer.fit_transform(x_df)

x_df = pd.DataFrame(x_df_values,columns=x_df.columns)

x_df['price'] = df['price']

x_df.head()

a = x_df.corr()['price'].reset_index()

b = df.corr()['price'].reset_index()

b.merge(a,on='index')

pd.get_dummies(df,columns=['brand_name','processor_brand','os'],drop_first=True).corr()['price']

